<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <packaging>pom</packaging>

    <modules>
        <module>telegraff-core</module>
        <module>telegraff-autoconfigure</module>
        <module>telegraff-starter</module>
    </modules>

    <groupId>com.github.xzima</groupId>
    <artifactId>telegraff</artifactId>
    <version>1.0.0-SNAPSHOT</version>

    <name>Telegraff</name>
    <description>
        Kotlin DSL for developing Telegram bot forms
    </description>

    <url>https://github.com/xzima/telegraff</url>
    <inceptionYear>2018</inceptionYear>

    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <developers>
        <developer>
            <name>Alex Zima</name>
            <email>xzima@ro.ru</email>
            <roles>
                <role>architect</role>
                <role>developer</role>
            </roles>
        </developer>
    </developers>

    <contributors>
        <contributor>
            <name>Ruslan Molchanov</name>
            <email>me@ruslanys.me</email>
            <url>https://ruslanys.me</url>
            <roles>
                <role>developer</role>
            </roles>
        </contributor>
    </contributors>

    <scm>
        <connection>scm:git:git@github.com:xzima/telegraff.git</connection>
        <developerConnection>scm:git:git@github.com:xzima/telegraff.git</developerConnection>
        <url>git@github.com:xzima/telegraff.git</url>
        <tag>HEAD</tag>
    </scm>

    <repositories>
        <repository>
            <id>central</id>
            <name>Maven Central</name>
            <url>https://repo1.maven.org/maven2/</url>
        </repository>
        <repository>
            <id>jitpack.io</id>
            <name>JitPack</name>
            <url>https://jitpack.io</url>
        </repository>
    </repositories>

    <properties>
        <java.version>11</java.version>
        <maven.version>3.6.3</maven.version>
        <encoding>UTF-8</encoding>
        <!--==========================================-->
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <project.build.sourceEncoding>${encoding}</project.build.sourceEncoding>
        <project.reporting.outputEncoding>${encoding}</project.reporting.outputEncoding>
        <!-- kotlin -->
        <kotlin.version>1.5.31</kotlin.version>
        <kotlin.code.style>official</kotlin.code.style>
        <kotlin.compiler.incremental>true</kotlin.compiler.incremental>
        <kotlin.compiler.jvmTarget>${java.version}</kotlin.compiler.jvmTarget>
        <!-- test -->
        <plugin.test.version>2.22.2</plugin.test.version>
        <skipTests>true</skipTests>
        <testJavaOpts>-Xmx1024m</testJavaOpts>
        <!-- Allow for the ability to pass JVM memory flags for Unit Tests. Since
             maven-surefire-plugin forks a new JVM, it ignores MAVEN_OPTS.-->
        <argLine>${testJavaOpts} ${jacocoArgLine}</argLine>
        <!-- Detailed logs in surefire-reports/testName-output.txt instead of stdout -->
        <maven.test.redirectTestOutputToFile>true</maven.test.redirectTestOutputToFile>
        <!-- Ensure full stacktrace is logged (when errors occur) -->
        <trimStackTrace>false</trimStackTrace>
        <!-- jacoco -->
        <plugin.jacoco.version>0.8.7</plugin.jacoco.version>
        <jacoco.propertyName>jacocoArgLine</jacoco.propertyName>
        <!--==========================================-->
        <!-- DEPENDENCIES -->
        <spring.version>5.2.5.RELEASE</spring.version>
        <spring-boot.version>2.2.6.RELEASE</spring-boot.version>
        <spring-security.version>5.2.2.RELEASE</spring-security.version>
        <hibernate.version>5.4.10.Final</hibernate.version>
        <hibernate-validator.version>6.0.18.Final</hibernate-validator.version>
        <postgresql.driver.version>42.2.24</postgresql.driver.version>
        <solr.client.version>8.8.1</solr.client.version>
        <!--================================================-->
        <plugin.site.version>3.9.1</plugin.site.version>
        <plugin.resources.version>3.2.0</plugin.resources.version>
        <plugin.dependency.version>3.2.0</plugin.dependency.version>
        <plugin.install.version>2.5.2</plugin.install.version>
        <plugin.deploy.version>2.8.2</plugin.deploy.version>
        <plugin.clean.version>3.1.0</plugin.clean.version>
        <plugin.jar.version>3.2.0</plugin.jar.version>
        <plugin.enforcer.version>3.0.0</plugin.enforcer.version>
        <plugin.offline.version>1.2.8</plugin.offline.version>
        <plugin.source.version>3.2.1</plugin.source.version>
        <!-- release -->
        <plugin.release.version>2.5.3</plugin.release.version>
        <!-- During release:prepare and release:perform, pass the "release" property to enable the
            "release" profile (and enable/disable other profiles based on whether they need releasing) -->
        <arguments>-Drelease</arguments>
        <pushChanges>false</pushChanges>
        <localCheckout>true</localCheckout>
        <autoVersionSubmodules>true</autoVersionSubmodules>
        <!-- license -->
        <plugin.license.version>4.1</plugin.license.version>
        <license.header>${user.dir}/src/main/license/LICENSE_HEADER.txt</license.header>
        <license.strictCheck>true</license.strictCheck>
    </properties>

    <build>
        <sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>
        <testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>
        <plugins>
            <!-- Use to enforce particular versions of Java and Maven,
                 and to ensure no conflicting dependencies -->
            <plugin>
                <!-- https://maven.apache.org/enforcer/enforcer-rules -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>${plugin.enforcer.version}</version>
                <configuration>
                    <rules>
                        <requireJavaVersion>
                            <version>${java.version}</version>
                        </requireJavaVersion>
                        <requireMavenVersion>
                            <version>[${maven.version},)</version>
                        </requireMavenVersion>
                        <bannedDependencies>
                            <excludes>
                                <exclude>log4j:log4j</exclude>
                            </excludes>
                        </bannedDependencies>
                        <DependencyConvergence/>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Used to compile Kotlin classes -->
            <plugin>
                <!-- https://kotlinlang.org/docs/maven.html -->
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-maven-plugin</artifactId>
                <version>${kotlin.version}</version>
                <executions>
                    <execution>
                        <id>compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>test-compile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>test-compile</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <compilerPlugins>
                        <plugin>kotlinx-serialization</plugin>
                    </compilerPlugins>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.jetbrains.kotlin</groupId>
                        <artifactId>kotlin-maven-serialization</artifactId>
                        <version>${kotlin.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
            <!-- Used to package all JARs -->
            <plugin>
                <!-- https://maven.apache.org/shared/maven-archiver/ -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${plugin.jar.version}</version>
            </plugin>
            <!-- Used to run Unit tests -->
            <plugin>
                <!-- https://maven.apache.org/surefire/maven-surefire-plugin/test-mojo.html -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${plugin.test.version}</version>
            </plugin>
            <!-- clean -->
            <plugin>
                <!-- https://maven.apache.org/plugins/maven-clean-plugin/ -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>${plugin.clean.version}</version>
            </plugin>
            <!-- deploy -->
            <plugin>
                <!-- https://maven.apache.org/plugins/maven-deploy-plugin/ -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>${plugin.deploy.version}</version>
            </plugin>
            <!-- install -->
            <plugin>
                <!-- https://maven.apache.org/plugins/maven-install-plugin/ -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <version>${plugin.install.version}</version>
            </plugin>
            <!-- dependency -->
            <plugin>
                <!-- https://maven.apache.org/plugins/maven-dependency-plugin/ -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>${plugin.dependency.version}</version>
            </plugin>
            <!-- resource -->
            <plugin>
                <!-- https://maven.apache.org/plugins/maven-resources-plugin/ -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${plugin.resources.version}</version>
            </plugin>
            <!-- Used for code coverage reporting -->
            <plugin>
                <!-- https://www.eclemma.org/jacoco/trunk/doc/maven.html -->
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${plugin.jacoco.version}</version>
                <executions>
                    <execution>
                        <id>prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Used to validate License Headers (see build process) -->
            <plugin>
                <!-- https://www.mojohaus.org/license-maven-plugin/ -->
                <groupId>com.mycila</groupId>
                <artifactId>license-maven-plugin</artifactId>
                <version>${plugin.license.version}</version>
                <dependencies>
                    <dependency>
                        <groupId>com.mycila</groupId>
                        <artifactId>license-maven-plugin-git</artifactId>
                        <!-- make sure you use the same version as license-maven-plugin -->
                        <version>${plugin.license.version}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <mapping>
                        <kt>JAVADOC_STYLE</kt>
                        <kts>JAVADOC_STYLE</kts>
                    </mapping>
                    <includes>
                        <include>src/**</include>
                    </includes>
                    <excludes>
                        <exclude>**/src/test/resources/**</exclude>
                        <exclude>**/src/test/data/**</exclude>
                        <exclude>**/src/main/license/**</exclude>
                        <exclude>**/META-INF/**</exclude>
                        <exclude>**/robots.txt</exclude>
                        <exclude>**/LICENSE*</exclude>
                        <exclude>**/README*</exclude>
                        <exclude>**/readme*</exclude>
                        <exclude>**/.gitignore</exclude>
                        <exclude>**/*.cfg</exclude>
                        <exclude>**/*.conf</exclude>
                    </excludes>
                </configuration>
                <executions>
                    <execution>
                        <id>check-headers</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Used to generate JavaDocs for new releases (see release profile). -->
            <plugin>
                <!-- https://github.com/Kotlin/dokka -->
                <groupId>org.jetbrains.dokka</groupId>
                <artifactId>dokka-maven-plugin</artifactId>
                <version>${kotlin.version}</version>
                <configuration>
                    <dokkaPlugins>
                        <plugin>
                            <groupId>org.jetbrains.dokka</groupId>
                            <artifactId>javadoc-plugin</artifactId>
                            <version>${kotlin.version}</version>
                        </plugin>
                    </dokkaPlugins>
                </configuration>
            </plugin>
            <!-- Used to generate source JARs for new releases (see release profile). -->
            <plugin>
                <!-- https://maven.apache.org/plugins/maven-source-plugin/ -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>${plugin.source.version}</version>
            </plugin>
            <!-- Specify our settings for new releases via 'mvn release:*' -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>${plugin.release.version}</version>
                <configuration>
                    <goals>install</goals>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>coverage</id>
            <activation>
                <property>
                    <name>skipTests</name>
                    <value>false</value>
                </property>
            </activation>
            <modules>
                <module>coverage</module>
            </modules>
        </profile>

        <!--
         The 'release' profile is used by the 'maven-release-plugin' (see above)
         to actually perform a software release to Maven central.
         This profile contains settings which are ONLY enabled when performing a release.
         NOTE: You MUST trigger this profile by running "-Drelease"
         (as that flag also triggers other modules to be enabled/disabled as necessary for release)
        -->
        <profile>
            <id>release</id>
            <activation>
                <activeByDefault>false</activeByDefault>
                <!-- Enable this profile if we are doing a release (-Drelease) -->
                <property>
                    <name>release</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <!-- For new releases, generate Source JAR files -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>attach-sources</id>
                                <goals>
                                    <goal>jar-no-fork</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- For new releases, generate JavaDocs for each module -->
                    <plugin>
                        <groupId>org.jetbrains.dokka</groupId>
                        <artifactId>dokka-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>javadocJar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>


    <dependencyManagement>
        <dependencies>
            <!-- modules -->
            <dependency>
                <groupId>com.github.xzima.telegraff</groupId>
                <artifactId>telegraff-core</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.github.xzima.telegraff</groupId>
                <artifactId>telegraff-autoconfigure</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.github.xzima.telegraff</groupId>
                <artifactId>telegraff-starter</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!--ide -->
            <dependency>
                <groupId>org.jetbrains</groupId>
                <artifactId>annotations</artifactId>
                <version>22.0.0</version>
                <scope>provided</scope>
            </dependency>
            <!-- kotlin -->
            <dependency>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-stdlib</artifactId>
                <version>${kotlin.version}</version>
            </dependency>
            <dependency>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-stdlib-jdk8</artifactId>
                <version>${kotlin.version}</version>
            </dependency>
            <dependency>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-reflect</artifactId>
                <version>${kotlin.version}</version>
            </dependency>
            <!-- kotlin script -->
            <dependency>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-script-util</artifactId>
                <version>${kotlin.version}</version>
            </dependency>
            <dependency>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-compiler-embeddable</artifactId>
                <version>${kotlin.version}</version>
            </dependency>
            <!-- jackson -->
            <dependency>
                <groupId>com.fasterxml.jackson.module</groupId>
                <artifactId>jackson-module-kotlin</artifactId>
                <version>2.13.0</version>
            </dependency>
            <!-- test -->
            <dependency>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-test</artifactId>
                <version>${kotlin.version}</version>
                <scope>test</scope>
            </dependency>
            <!-- spring -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>2.5.5</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-stdlib</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-stdlib-jdk8</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-reflect</artifactId>
        </dependency>
    </dependencies>
</project>
